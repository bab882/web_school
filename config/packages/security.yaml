security:
    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'
    providers:
        app_user_provider:
            entity:
                class: App\Entity\User
                property: email 
    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        main:
            lazy: true
            provider: app_user_provider
            custom_authenticator: App\Security\UserAuthenticator
            logout:
                path: app_logout
                target: app_login

            two_factor:
                auth_form_path: 2fa_login # The route name you have used in the routes.yaml
                check_path: 2fa_login_check # The route name you have used in the routes.yaml
                #trusted_parameter_name: _trusted # Name of the parameter for the trusted device option

            login_throttling:
                max_attempts: 3
                interval: '60 minutes'



    access_control:
        - { path: '^/admin', roles: ROLE_ADMIN, requires_channel: '%env(SECURE_SCHEME)%', methods: [GET, PUT, DELETE, POST] }
        - { path: '^/hjhjhj', roles: ROLE_USER }
        # Intercepter toutes les autres URL
        - { path: '^/', roles: PUBLIC_ACCESS, requires_channel: https }

when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon
